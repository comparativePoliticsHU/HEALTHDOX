?read.xlsx
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep=";", stringsAsFactors = F, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep=";", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep=",", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep="\tab", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep="\t", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23",sep="\t", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.txt",sep="\t", stringsAsFactors = F, fill=T, encoding="UTF-16")
read.table("./data/in/France_Matthias_Brunn_MB_2016_08_23.rtf",sep="\t", stringsAsFactors = F, fill=T, encoding="UTF-16")
REF <- read.xlsx("~/Downloads/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
needs(openxlsx,readxl,countrycode)
names(REF)
Labels <- REF[1,]
REF[1:5,"ref_name"]
REF <- REF[,!grepl("X",names(REF))]
REF <- REF[-1,]
REF <- read_excel("~/Downloads/France_Matthias_Brunn_MB_2016_08_23.xlsx")
REF <- read_excel("~/Downloads/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
?read_excel
needs(openxlsx,countrycode)
Sys.getlocale(category = "LC_ALL")
Sys.setlocale(category = "LC_ALL", locale = "Roman")
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
REF <- read.csv("./data/in/France_Matthias_Brunn_MB_2016_08_23.csv",sep=";", stringsAsFactors = F, encoding="macintosh")
REF <- read.xlsx("~/Downloads/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
REF <- read.csv("./data/in/France_Matthias_Brunn_MB_2016_08_23.csv",sep=";", stringsAsFactors = F, encoding="macintosh")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
REF <- read.xlsx("./data/in/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
Sys.getlocale(category = "LC_ALL")
REF$ctr_ccode <- countrycode::countrycode(REF$country,"country.name","iso3c")
# Clean Reform Name column
# split column in  and in native language
ref_name_split <- strsplit(REF$ref_name," - ")
# reform name in english
REF$ref_name_en <- sapply(ref_name_split, "[", 1)
# and remove anoying characters
REF$ref_name_en <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name_en)
# reform name in native languag
REF$ref_name <- sapply(ref_name_split, "[", 2)
#     # and remove anoying characters
#     REF$ref_name <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name)
date_cols <- colnames(REF)[grepl("date",colnames(REF))]
# check formatting
ColCheck <- data.frame(col=date_cols, stringsAsFactors=F)
for (c in seq_along(date_cols)) {
ColCheck$any_contains_blank[c] <- any(grepl("[[:blank:]]", REF[, date_cols[c] ]))   # any element contains space
ColCheck$which_contains_blank[c] <- list(which(grepl("[[:blank:]]", REF[, date_cols[c] ])))  # which element (i.e, row) contains space
ColCheck$any_not_numeric[c] <- any(grepl("[^[1-9]]", REF[, date_cols[c] ]))  # any element not numeric
ColCheck$which_not_numeric[c]  <- list(which(grepl("[^[1-9]]", REF[, date_cols[c] ])))  # which element (i.e, row) is not completely numeric space
ColCheck$has_hyphen[c] <- any(grepl("-", REF[, date_cols[c] ]))  # any element has hyphen
ColCheck$which_has_hyphen[c] <- list(which(grepl("-", REF[, date_cols[c] ])))  # which element has hyphen
}
date_cols
ColCheck
blank_date_entries <- subset(ColCheck,any_contains_blank==T,c(col,which_contains_blank))
if ( nrow(blank_date_entries) > 1L ) {
target_cols <- REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])]
if( !any(grepl("[[:alnum:]]|[-/.]",target_cols)) ) {  # if not contains alpha-numeric characters, or dot, dash or hyphen
REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])] <- NA  # .. replace element with NA
}
}
# if non-numeric
nonnumeric_date_entries <- subset(ColCheck,any_not_numeric==T,c(col,which_not_numeric))
if ( nrow(nonnumeric_date_entries) > 1L ) {
#      if gsub("[[:digit:]]|[-/.]","",REF$check) %in% month.abb
}
# if hyphen'd
hyphened_date_entries <- subset(ColCheck,has_hyphen==T,c(col,which_has_hyphen))
if ( nrow(hyphened_date_entries) > 1L ) {
for( c in 1:nrow(hyphened_date_entries) ) {
REF[, hyphened_date_entries$col[c] ] <- as.Date(REF[, hyphened_date_entries$col[c] ], format="%Y-%m-%d")
}
} else {
for (c in seq_along(date_cols)) {
# add condition that checks for formating of column first
REF[, date_cols[c] ] <- as.Date(as.integer(REF[, date_cols[c] ]), format="%Y-%m-%d", origin="1899-12-30")
}
}
REF
source("./jobs/cr_config_with_hog_and_veto_info.R")
subset(mv_configuration_events,ctr_id==29)
# clean global environment
rm(list=setdiff(ls(),c("configs","cab_parties","REF","Labels","veto_points_table")))
# source matchEventsonConfigs() function
setwd("/Users/lichthau/Documents/Humboldt/HEALTHDOX/Country_Chapters")
source("./jobs/matchEventsOnConfigs.R")
# match reforms on configurations by date_law
ReformConfigVtoEvents <- matchEventsOnConfigs(events = REF, event_dates_col = "date_law",
config_ts = configs, start_date_var = "sdate",
group_var = "ctr_ccode")
rm(configs)
# list of all parties who where in reforming cabinets
listOfPartiesInTable <- subset(cab_parties,subset= pty_abr %in% unique(unlist(strsplit(ReformConfigVtoEvents$in_cab, ", "))) & ctr_ccode=="FRA")
names(listOfPartiesInTable) <- c("ISO-3-character Country Code", "Party Abbreviation", "Party Name", "Party Name in English")
rm(cab_parties)
ReformConfigVtoEventsSub <- ReformConfigVtoEvents[,c("country", "year",
"ref_name_en", "ref_name", "date_law", "date_impl",
"cab_hog_n", "pty_abr", "in_cab",
"cab_lh_sts_shr","vto_lh",
"cab_uh_sts_shr","vto_uh",
"vto_prs","vto_jud","vto_terr","vto_elct", "open_veto_points",
"ref_meas")]
class(ReformConfigVtoEventsSub)
#
Labels
attrLabels <- attr(Labels,"names")
Labels <- gsub("[[:space:]]"," ",Labels)
Labels <- trimws(gsub("[(:].*"," ",Labels))
attr(Labels, "names") <- attrLabels
Labels
rm(attrLabels)
names(ReformConfigVtoEventsSub)[ names(ReformConfigVtoEventsSub) %in% names(Labels) ] <- Labels[ names(Labels) %in% names(ReformConfigVtoEventsSub) ]
names(ReformConfigVtoEventsSub)[ grepl("_",names(ReformConfigVtoEventsSub)) ] <- c("Reform Name in English"
, "Last Name of the Head of Government (Prime Minister)"
, "Party of the Head of Government"
, "Parties in Cabinet"
, "Cabinet Parties' Cumulated Seat Share in the Lower House", "Lower House Veto Point"
, "Cabinet Parties' Cumulated Seat Share in the Upper House", "Upper House Veto Point"
, "President Veto Point", "Judicial Veto Point", "Territorial Unit Veto Point", "Electorate Veto Point"
, "Open Veto Points")
names(ReformConfigVtoEventsSub)
# write to .xlsx workbook
FranceHandbookTable4 <- list("Reforms"=ReformConfigVtoEventsSub[,-c(11:17)],
"Reforms_detailed"=ReformConfigVtoEventsSub,
"Veto_Institutions"=subset(veto_points_table[,-1],ctr_ccode=="FRA"),
"Cabinet_Parties" = listOfPartiesInTable)
str(FranceHandbookTable4)
style_table <- createStyle(fontName = "Helvetica", fontSize = "12",
numFmt = "GENERAL",
halign = "left", valign = "top")
write.xlsx(FranceHandbookTable4
, creator = "Hauke Licht"
, file = "./data/out/France_handbook_table4.xlsx"
, borders = "rows", colNames = T, rowNames = F
, style = style_table, overwrite = T)
system("open data/out/France_handbook_table4.xlsx")
ReformConfigVtoEventsSub
require(needs)
needs(openxlsx,countrycode)
Sys.getlocale(category = "LC_ALL")
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
REF <- read.xlsx("./data/in/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
# get ISO country codes
REF$ctr_ccode <- countrycode::countrycode(REF$country,"country.name","iso3c")
# Clean Reform Name column
# split column in  and in native language
ref_name_split <- strsplit(REF$ref_name," - ")
# reform name in english
REF$ref_name_en <- sapply(ref_name_split, "[", 1)
# and remove anoying characters
REF$ref_name_en <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name_en)
# reform name in native languag
REF$ref_name <- sapply(ref_name_split, "[", 2)
#     # and remove anoying characters
#     REF$ref_name <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name)
# Clean and Format Date Columns
date_cols <- colnames(REF)[grepl("date",colnames(REF))]
# check formatting
ColCheck <- data.frame(col=date_cols, stringsAsFactors=F)
for (c in seq_along(date_cols)) {
ColCheck$any_contains_blank[c] <- any(grepl("[[:blank:]]", REF[, date_cols[c] ]))   # any element contains space
ColCheck$which_contains_blank[c] <- list(which(grepl("[[:blank:]]", REF[, date_cols[c] ])))  # which element (i.e, row) contains space
ColCheck$any_not_numeric[c] <- any(grepl("[^[1-9]]", REF[, date_cols[c] ]))  # any element not numeric
ColCheck$which_not_numeric[c]  <- list(which(grepl("[^[1-9]]", REF[, date_cols[c] ])))  # which element (i.e, row) is not completely numeric space
ColCheck$has_hyphen[c] <- any(grepl("-", REF[, date_cols[c] ]))  # any element has hyphen
ColCheck$which_has_hyphen[c] <- list(which(grepl("-", REF[, date_cols[c] ])))  # which element has hyphen
}
# clean date columns
# if only blank
blank_date_entries <- subset(ColCheck,any_contains_blank==T,c(col,which_contains_blank))
if ( nrow(blank_date_entries) > 1L ) {
target_cols <- REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])]
if( !any(grepl("[[:alnum:]]|[-/.]",target_cols)) ) {  # if not contains alpha-numeric characters, or dot, dash or hyphen
REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])] <- NA  # .. replace element with NA
}
}
# if non-numeric
nonnumeric_date_entries <- subset(ColCheck,any_not_numeric==T,c(col,which_not_numeric))
if ( nrow(nonnumeric_date_entries) > 1L ) {
#      if gsub("[[:digit:]]|[-/.]","",REF$check) %in% month.abb
}
# if hyphen'd
hyphened_date_entries <- subset(ColCheck,has_hyphen==T,c(col,which_has_hyphen))
if ( nrow(hyphened_date_entries) > 1L ) {
for( c in 1:nrow(hyphened_date_entries) ) {
REF[, hyphened_date_entries$col[c] ] <- as.Date(REF[, hyphened_date_entries$col[c] ], format="%Y-%m-%d")
}
} else {
for (c in seq_along(date_cols)) {
# add condition that checks for formating of column first
REF[, date_cols[c] ] <- as.Date(as.integer(REF[, date_cols[c] ]), format="%Y-%m-%d", origin="1899-12-30")
}
}
REF
source("./jobs/cr_config_with_hog_and_veto_info.R")
subset(mv_configuration_events,ctr_id==29)
# clean global environment
rm(list=setdiff(ls(),c("configs","cab_parties","REF","Labels","veto_points_table")))
# source matchEventsonConfigs() function
setwd("/Users/lichthau/Documents/Humboldt/HEALTHDOX/Country_Chapters")
source("./jobs/matchEventsOnConfigs.R")
ReformConfigVtoEvents <- matchEventsOnConfigs(events = REF, event_dates_col = "date_law",
config_ts = configs, start_date_var = "sdate",
group_var = "ctr_ccode")
ReformConfigVtoEvents
Encoding()
Encoding(ReformConfigVtoEvents$ref_name)
?Encoding
enc2utf8(ReformConfigVtoEvents$ref_name)
enc2native(ReformConfigVtoEvents$ref_name)
ReformConfigVtoEvents$ref_name
enc2native(ReformConfigVtoEvents$ref_name)
Encoding(ReformConfigVtoEvents$ref_name) <- "UTF-8"
ReformConfigVtoEvents$ref_name
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "latin1")
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "macintosh")
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "latin1")
Encoding(ReformConfigVtoEvents$ref_name)
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "bytes")
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "ASCII")
iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "ISO-8859-1")
ReformConfigVtoEvents$ref_name <- iconv(ReformConfigVtoEvents$ref_name, "UTF-8", "ISO-8859-1")
rm(configs)
# list of all parties who where in reforming cabinets
listOfPartiesInTable <- subset(cab_parties,subset= pty_abr %in% unique(unlist(strsplit(ReformConfigVtoEvents$in_cab, ", "))) & ctr_ccode=="FRA")
names(listOfPartiesInTable) <- c("ISO-3-character Country Code", "Party Abbreviation", "Party Name", "Party Name in English")
rm(cab_parties)
ReformConfigVtoEventsSub <- ReformConfigVtoEvents[,c("country", "year",
"ref_name_en", "ref_name", "date_law", "date_impl",
"cab_hog_n", "pty_abr", "in_cab",
"cab_lh_sts_shr","vto_lh",
"cab_uh_sts_shr","vto_uh",
"vto_prs","vto_jud","vto_terr","vto_elct", "open_veto_points",
"ref_meas")]
class(ReformConfigVtoEventsSub)
#
Labels
attrLabels <- attr(Labels,"names")
Labels <- gsub("[[:space:]]"," ",Labels)
Labels <- trimws(gsub("[(:].*"," ",Labels))
attr(Labels, "names") <- attrLabels
Labels
rm(attrLabels)
names(ReformConfigVtoEventsSub)[ names(ReformConfigVtoEventsSub) %in% names(Labels) ] <- Labels[ names(Labels) %in% names(ReformConfigVtoEventsSub) ]
names(ReformConfigVtoEventsSub)[ grepl("_",names(ReformConfigVtoEventsSub)) ] <- c("Reform Name in English"
, "Last Name of the Head of Government (Prime Minister)"
, "Party of the Head of Government"
, "Parties in Cabinet"
, "Cabinet Parties' Cumulated Seat Share in the Lower House", "Lower House Veto Point"
, "Cabinet Parties' Cumulated Seat Share in the Upper House", "Upper House Veto Point"
, "President Veto Point", "Judicial Veto Point", "Territorial Unit Veto Point", "Electorate Veto Point"
, "Open Veto Points")
names(ReformConfigVtoEventsSub)
# write to .xlsx workbook
FranceHandbookTable4 <- list("Reforms"=ReformConfigVtoEventsSub[,-c(11:17)],
"Reforms_detailed"=ReformConfigVtoEventsSub,
"Veto_Institutions"=subset(veto_points_table[,-1],ctr_ccode=="FRA"),
"Cabinet_Parties" = listOfPartiesInTable)
str(FranceHandbookTable4)
style_table <- createStyle(fontName = "Helvetica", fontSize = "12",
numFmt = "GENERAL",
halign = "left", valign = "top")
write.xlsx(FranceHandbookTable4
, creator = "Hauke Licht"
, file = "./data/out/France_handbook_table4.xlsx"
, borders = "rows", colNames = T, rowNames = F
, style = style_table, overwrite = T)
system("open data/out/France_handbook_table4.xlsx")
ReformConfigVtoEvents <- matchEventsOnConfigs(events = REF, event_dates_col = "date_law",
config_ts = configs, start_date_var = "sdate",
group_var = "ctr_ccode")
Encoding(ReformConfigVtoEvents$ref_name) <- "UTF-8"
source("./jobs/cr_config_with_hog_and_veto_info.R")
subset(mv_configuration_events,ctr_id==29)
# clean global environment
rm(list=setdiff(ls(),c("configs","cab_parties","REF","Labels","veto_points_table")))
# source matchEventsonConfigs() function
setwd("/Users/lichthau/Documents/Humboldt/HEALTHDOX/Country_Chapters")
source("./jobs/matchEventsOnConfigs.R")
# match reforms on configurations by date_law
ReformConfigVtoEvents <- matchEventsOnConfigs(events = REF, event_dates_col = "date_law",
config_ts = configs, start_date_var = "sdate",
group_var = "ctr_ccode")
Encoding(ReformConfigVtoEvents$ref_name) <- "UTF-8"
rm(configs)
# list of all parties who where in reforming cabinets
listOfPartiesInTable <- subset(cab_parties,subset= pty_abr %in% unique(unlist(strsplit(ReformConfigVtoEvents$in_cab, ", "))) & ctr_ccode=="FRA")
names(listOfPartiesInTable) <- c("ISO-3-character Country Code", "Party Abbreviation", "Party Name", "Party Name in English")
rm(cab_parties)
ReformConfigVtoEventsSub <- ReformConfigVtoEvents[,c("country", "year",
"ref_name_en", "ref_name", "date_law", "date_impl",
"cab_hog_n", "pty_abr", "in_cab",
"cab_lh_sts_shr","vto_lh",
"cab_uh_sts_shr","vto_uh",
"vto_prs","vto_jud","vto_terr","vto_elct", "open_veto_points",
"ref_meas")]
class(ReformConfigVtoEventsSub)
#
Labels
attrLabels <- attr(Labels,"names")
Labels <- gsub("[[:space:]]"," ",Labels)
Labels <- trimws(gsub("[(:].*"," ",Labels))
attr(Labels, "names") <- attrLabels
Labels
rm(attrLabels)
names(ReformConfigVtoEventsSub)[ names(ReformConfigVtoEventsSub) %in% names(Labels) ] <- Labels[ names(Labels) %in% names(ReformConfigVtoEventsSub) ]
names(ReformConfigVtoEventsSub)[ grepl("_",names(ReformConfigVtoEventsSub)) ] <- c("Reform Name in English"
, "Last Name of the Head of Government (Prime Minister)"
, "Party of the Head of Government"
, "Parties in Cabinet"
, "Cabinet Parties' Cumulated Seat Share in the Lower House", "Lower House Veto Point"
, "Cabinet Parties' Cumulated Seat Share in the Upper House", "Upper House Veto Point"
, "President Veto Point", "Judicial Veto Point", "Territorial Unit Veto Point", "Electorate Veto Point"
, "Open Veto Points")
names(ReformConfigVtoEventsSub)
# write to .xlsx workbook
FranceHandbookTable4 <- list("Reforms"=ReformConfigVtoEventsSub[,-c(11:17)],
"Reforms_detailed"=ReformConfigVtoEventsSub,
"Veto_Institutions"=subset(veto_points_table[,-1],ctr_ccode=="FRA"),
"Cabinet_Parties" = listOfPartiesInTable)
str(FranceHandbookTable4)
style_table <- createStyle(fontName = "Helvetica", fontSize = "12",
numFmt = "GENERAL",
halign = "left", valign = "top")
write.xlsx(FranceHandbookTable4
, creator = "Hauke Licht"
, file = "./data/out/France_handbook_table4.xlsx"
, borders = "rows", colNames = T, rowNames = F
, style = style_table, overwrite = T)
system("open data/out/France_handbook_table4.xlsx")
ReformConfigVtoEventsSub
View(ReformConfigVtoEventsSub)
require(needs)
needs(openxlsx,countrycode)
Sys.getlocale(category = "LC_ALL")
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
REF <- read.xlsx("./data/in/France_Matthias_Brunn_MB_2016_08_23.xlsx")
names(REF)
REF <- REF[,!grepl("X",names(REF))]
Labels <- REF[1,]
REF <- REF[-1,]
REF[1:5,"ref_name"]
# get ISO country codes
REF$ctr_ccode <- countrycode::countrycode(REF$country,"country.name","iso3c")
# Clean Reform Name column
# split column in  and in native language
ref_name_split <- strsplit(REF$ref_name," - ")
# reform name in english
REF$ref_name_en <- sapply(ref_name_split, "[", 1)
# and remove anoying characters
REF$ref_name_en <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name_en)
# reform name in native languag
REF$ref_name <- sapply(ref_name_split, "[", 2)
#     # and remove anoying characters
#     REF$ref_name <- gsub("[^[:alnum:]|[:blank:]]","",REF$ref_name)
# Clean and Format Date Columns
date_cols <- colnames(REF)[grepl("date",colnames(REF))]
# check formatting
ColCheck <- data.frame(col=date_cols, stringsAsFactors=F)
for (c in seq_along(date_cols)) {
ColCheck$any_contains_blank[c] <- any(grepl("[[:blank:]]", REF[, date_cols[c] ]))   # any element contains space
ColCheck$which_contains_blank[c] <- list(which(grepl("[[:blank:]]", REF[, date_cols[c] ])))  # which element (i.e, row) contains space
ColCheck$any_not_numeric[c] <- any(grepl("[^[1-9]]", REF[, date_cols[c] ]))  # any element not numeric
ColCheck$which_not_numeric[c]  <- list(which(grepl("[^[1-9]]", REF[, date_cols[c] ])))  # which element (i.e, row) is not completely numeric space
ColCheck$has_hyphen[c] <- any(grepl("-", REF[, date_cols[c] ]))  # any element has hyphen
ColCheck$which_has_hyphen[c] <- list(which(grepl("-", REF[, date_cols[c] ])))  # which element has hyphen
}
# clean date columns
# if only blank
blank_date_entries <- subset(ColCheck,any_contains_blank==T,c(col,which_contains_blank))
if ( nrow(blank_date_entries) > 1L ) {
target_cols <- REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])]
if( !any(grepl("[[:alnum:]]|[-/.]",target_cols)) ) {  # if not contains alpha-numeric characters, or dot, dash or hyphen
REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])] <- NA  # .. replace element with NA
}
}
# if non-numeric
nonnumeric_date_entries <- subset(ColCheck,any_not_numeric==T,c(col,which_not_numeric))
if ( nrow(nonnumeric_date_entries) > 1L ) {
#      if gsub("[[:digit:]]|[-/.]","",REF$check) %in% month.abb
}
# if hyphen'd
hyphened_date_entries <- subset(ColCheck,has_hyphen==T,c(col,which_has_hyphen))
if ( nrow(hyphened_date_entries) > 1L ) {
for( c in 1:nrow(hyphened_date_entries) ) {
REF[, hyphened_date_entries$col[c] ] <- as.Date(REF[, hyphened_date_entries$col[c] ], format="%Y-%m-%d")
}
} else {
for (c in seq_along(date_cols)) {
# add condition that checks for formating of column first
REF[, date_cols[c] ] <- as.Date(as.integer(REF[, date_cols[c] ]), format="%Y-%m-%d", origin="1899-12-30")
}
}
REF
REF
require(needs)
needs(R.cache,dplyr,openxlsx)
# (1) get data from PCDB
setCacheRootPath(path="~/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public")
# load cached data list
allPCDBObjects <- loadCache(key=list("PCDB","data"))   # key is PCDB + data
# retrieve data from list
for ( o in seq_along(allPCDBObjects) ) {
assign(names(allPCDBObjects)[ o ], allPCDBObjects[[ o ]])
}; rm(o)
veto_institutions <- c("hog", "lh", "uh", "prs", "jud", "terr", "elct")
DFs <- c("mv_configuration_events",paste("view_configuration_vto_",veto_institutions,sep=""))
# list of data frames
config_vetos <- lapply(DFs,function(x) get(x))
# merge all veto views on configuration events by coountry ID and configuration start date
config_vetos <- Reduce(function(...) merge( ... , by=c("ctr_id", "sdate"),all.x=T), config_vetos)
# (1b) subset
config_vetos <- config_vetos[, c("ctr_id", "sdate", "cab_id.x", "lh_id.x", "lhelc_id", "uh_id.x", "prselc_id",
"hog_not_member_of_cab_parties", "vto_hog",
"vto_lh", "cab_lh_sts_shr",
"cab_uh_sts_shr", "vto_uh",
"cohabitation",  "vto_prs",
"vto_jud", "vto_terr", "vto_elct") ]
colnames(config_vetos)[c(3,4,6)] <- c("cab_id", "lh_id", "uh_id")
head(config_vetos)
veto_points_table <- merge(country[,c("ctr_id", "ctr_ccode")],veto_points[ ,-1],by="ctr_id",all.y=T)
veto_points_table
cabinet_table <- merge(country[,c("ctr_id", "ctr_ccode")],
cabinet[,c("cab_id", "ctr_id", "cab_sdate", "cab_hog_n")],
by="ctr_id",all.y=T)
cabinet_table
cabinet_portfolio_table <- merge(cabinet_table,
subset(cabinet_portfolios, pty_cab==TRUE,c("cab_id", "pty_id", "pty_cab", "pty_cab_hog")),
by="cab_id",all.y=T)
cabinet_parties_table <- merge(cabinet_portfolio_table,
party[, c("pty_id", "pty_abr", "pty_n", "pty_n_en")],
by="pty_id", all.x=T)
head( cabinet_parties_table)
cabinet_parties_table <- cabinet_parties_table %>%  arrange(cab_id, pty_id)
head( cabinet_parties_table)
cabinet_parties_table <- cabinet_parties_table %>%  arrange(cab_id, pty_id)
cabinet_parties_table$cab_hog_n <- trimws(gsub("\t","", cabinet_parties_table$cab_hog_n))
head(cabinet_parties_table)
cabinet_parties_table %>%
arrange(cab_id, pty_id) %>%
group_by(cab_id) %>%
mutate(in_cab = paste(pty_abr, collapse=", ") ) %>%  # list all cabinet parties
as.data.frame()
cab_parties <- unique(cabinet_parties_table[, c("ctr_ccode", "pty_abr", "pty_n", "pty_n_en")])
# subset: keep only rows of HOG's party
cabinet_hog_table <- subset(cabinet_parties_table, pty_cab_hog==TRUE, -c(pty_id,pty_cab,pty_cab_hog))
cabinet_hog_table
head(cabinet_hog_table)
head(cabinet_hog_table)
# (3) join cabinet HOG data table on configuration-veto events table
configs <- merge(config_vetos,cabinet_hog_table,by=c("ctr_id","cab_id"),all.x=T)
head(configs)
unique(veto_points_table$vto_inst_typ)
# get names of veto variables
veto_variables <- colnames(configs)[grepl("vto_",colnames(configs))]
veto_variables_labels <- c(vto_lh="lower house"
, vto_uh="upper house"
, vto_prs="head of state"
, vto_jud="judicial"
, vto_elct="electoral"
, vto_terr="territorial")
configs$open_veto_points <- ""  # create empty string vector
head(configs)
for (config in 1:nrow(configs) ) {
for (c in rev(seq_along(veto_variables))) {
if ( configs[config, veto_variables[c]] == 1 && !is.na(configs[config, veto_variables[c]]) ) {
configs[config, "open_veto_points"] <- paste(veto_variables_labels[veto_variables[c]],configs[config, "open_veto_points"],sep=", ")
}
}
}
for ( c in seq_along(unique(configs$ctr_id)) ) {
country_veto_inst <- unique(subset(veto_points_table,ctr_id==c,c(vto_inst_typ,vto_inst_n)))
country_veto_inst <- within(country_veto_inst, paste_names <- paste(vto_inst_typ, " (", vto_inst_n, ")", sep=""))
veto_variables_labels_ctr <- veto_variables_labels[veto_variables_labels %in% country_veto_inst$vto_inst_typ]
for ( inst in seq_along(veto_variables_labels_ctr) ) {
configs[configs$ctr_id==c,"open_veto_points"] <- gsub(veto_variables_labels_ctr[inst]
, country_veto_inst[country_veto_inst$vto_inst_typ == veto_variables_labels_ctr[inst], "paste_names"]
, configs[configs$ctr_id==c,"open_veto_points"])
}
}
# clean open veto points variable
configs$open_veto_points <- gsub("(, )*$","", configs$open_veto_points)
head(configs)
