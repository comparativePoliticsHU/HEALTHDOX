{
    "contents" : "require(needs)\nneeds(openxlsx,countrycode)\n\nSys.getlocale(category = \"LC_ALL\")\nSys.setlocale(\"LC_ALL\", 'en_US.UTF-8')\n\nREF <- read.xlsx(\"./data/in/France_Matthias_Brunn_MB_2016_08_23.xlsx\")\n\nnames(REF)\nREF <- REF[,!grepl(\"X\",names(REF))]\nLabels <- REF[1,]\n\nREF <- REF[-1,] \nREF[1:5,\"ref_name\"]\n\n# get ISO country codes\nREF$ctr_ccode <- countrycode::countrycode(REF$country,\"country.name\",\"iso3c\")\n\n# Clean Reform Name column\n  # split column in  and in native language \n  ref_name_split <- strsplit(REF$ref_name,\" - \")\n  # reform name in english\n  REF$ref_name_en <- sapply(ref_name_split, \"[\", 1)\n    # and remove anoying characters \n    REF$ref_name_en <- gsub(\"[^[:alnum:]|[:blank:]]\",\"\",REF$ref_name_en)\n    \n  # reform name in native languag\n  REF$ref_name <- sapply(ref_name_split, \"[\", 2)\n#     # and remove anoying characters \n#     REF$ref_name <- gsub(\"[^[:alnum:]|[:blank:]]\",\"\",REF$ref_name)\n\n# Clean and Format Date Columns      \n  \n  date_cols <- colnames(REF)[grepl(\"date\",colnames(REF))]\n    # check formatting\n    ColCheck <- data.frame(col=date_cols, stringsAsFactors=F)\n    for (c in seq_along(date_cols)) {\n      ColCheck$any_contains_blank[c] <- any(grepl(\"[[:blank:]]\", REF[, date_cols[c] ]))   # any element contains space\n      ColCheck$which_contains_blank[c] <- list(which(grepl(\"[[:blank:]]\", REF[, date_cols[c] ])))  # which element (i.e, row) contains space\n      ColCheck$any_not_numeric[c] <- any(grepl(\"[^[1-9]]\", REF[, date_cols[c] ]))  # any element not numeric\n      ColCheck$which_not_numeric[c]  <- list(which(grepl(\"[^[1-9]]\", REF[, date_cols[c] ])))  # which element (i.e, row) is not completely numeric space\n      ColCheck$has_hyphen[c] <- any(grepl(\"-\", REF[, date_cols[c] ]))  # any element has hyphen\n      ColCheck$which_has_hyphen[c] <- list(which(grepl(\"-\", REF[, date_cols[c] ])))  # which element has hyphen\n    }\n    \n    # clean date columns\n      # if only blank\n      blank_date_entries <- subset(ColCheck,any_contains_blank==T,c(col,which_contains_blank))\n      if ( nrow(blank_date_entries) > 1L ) {\n        target_cols <- REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])]\n        if( !any(grepl(\"[[:alnum:]]|[-/.]\",target_cols)) ) {  # if not contains alpha-numeric characters, or dot, dash or hyphen\n          REF[unlist(blank_date_entries[2]),as.character(blank_date_entries[1])] <- NA  # .. replace element with NA\n        }\n      }\n      # if non-numeric \n      nonnumeric_date_entries <- subset(ColCheck,any_not_numeric==T,c(col,which_not_numeric))\n      if ( nrow(nonnumeric_date_entries) > 1L ) {\n  #      if gsub(\"[[:digit:]]|[-/.]\",\"\",REF$check) %in% month.abb\n      }\n      # if hyphen'd\n      hyphened_date_entries <- subset(ColCheck,has_hyphen==T,c(col,which_has_hyphen))\n      if ( nrow(hyphened_date_entries) > 1L ) {\n        for( c in 1:nrow(hyphened_date_entries) ) {\n          REF[, hyphened_date_entries$col[c] ] <- as.Date(REF[, hyphened_date_entries$col[c] ], format=\"%Y-%m-%d\")\n        }\n      } else {\n        for (c in seq_along(date_cols)) {\n          # add condition that checks for formating of column first\n          REF[, date_cols[c] ] <- as.Date(as.integer(REF[, date_cols[c] ]), format=\"%Y-%m-%d\", origin=\"1899-12-30\")\n        }\n      }\n\nREF      \n\n# source configurations-veto events dataframe with HOG information\nsource(\"./jobs/cr_config_with_hog_and_veto_info.R\")\n\nsubset(mv_configuration_events,ctr_id==29)\n  # clean global environment\n  rm(list=setdiff(ls(),c(\"configs\",\"cab_parties\",\"REF\",\"Labels\",\"veto_points_table\")))\n\n# source matchEventsonConfigs() function \n  setwd(\"/Users/lichthau/Documents/Humboldt/HEALTHDOX/Country_Chapters\")\nsource(\"./jobs/matchEventsOnConfigs.R\")\n\n# match reforms on configurations by date_law \nReformConfigVtoEvents <- matchEventsOnConfigs(events = REF, event_dates_col = \"date_law\",\n                                           config_ts = configs, start_date_var = \"sdate\",\n                                           group_var = \"ctr_ccode\")\nEncoding(ReformConfigVtoEvents$ref_name) <- \"UTF-8\"\n# ReformConfigVtoEvents$ref_name <- iconv(ReformConfigVtoEvents$ref_name, \"UTF-8\", \"ISO-8859-1\")\n\n\nrm(configs)\n# list of all parties who where in reforming cabinets\nlistOfPartiesInTable <- subset(cab_parties,subset= pty_abr %in% unique(unlist(strsplit(ReformConfigVtoEvents$in_cab, \", \"))) & ctr_ccode==\"FRA\")\nnames(listOfPartiesInTable) <- c(\"ISO-3-character Country Code\", \"Party Abbreviation\", \"Party Name\", \"Party Name in English\") \nrm(cab_parties)\n\n\nReformConfigVtoEventsSub <- ReformConfigVtoEvents[,c(\"country\", \"year\",\n                                                 \"ref_name_en\", \"ref_name\", \"date_law\", \"date_impl\", \n                                                 \"cab_hog_n\", \"pty_abr\", \"in_cab\", \n                                                 \"cab_lh_sts_shr\",\"vto_lh\",\n                                                 \"cab_uh_sts_shr\",\"vto_uh\",\n                                                 \"vto_prs\",\"vto_jud\",\"vto_terr\",\"vto_elct\", \"open_veto_points\", \n                                                 \"ref_meas\")]\nclass(ReformConfigVtoEventsSub)\n\n# \nLabels\nattrLabels <- attr(Labels,\"names\")\n\nLabels <- gsub(\"[[:space:]]\",\" \",Labels)\nLabels <- trimws(gsub(\"[(:].*\",\" \",Labels))\nattr(Labels, \"names\") <- attrLabels\nLabels\nrm(attrLabels)\n\nnames(ReformConfigVtoEventsSub)[ names(ReformConfigVtoEventsSub) %in% names(Labels) ] <- Labels[ names(Labels) %in% names(ReformConfigVtoEventsSub) ]\n\nnames(ReformConfigVtoEventsSub)[ grepl(\"_\",names(ReformConfigVtoEventsSub)) ] <- c(\"Reform Name in English\"\n                                                                                   , \"Last Name of the Head of Government (Prime Minister)\"\n                                                                                   , \"Party of the Head of Government\"\n                                                                                   , \"Parties in Cabinet\"\n                                                                                   , \"Cabinet Parties' Cumulated Seat Share in the Lower House\", \"Lower House Veto Point\" \n                                                                                   , \"Cabinet Parties' Cumulated Seat Share in the Upper House\", \"Upper House Veto Point\" \n                                                                                   , \"President Veto Point\", \"Judicial Veto Point\", \"Territorial Unit Veto Point\", \"Electorate Veto Point\"\n                                                                                   , \"Open Veto Points\")\nnames(ReformConfigVtoEventsSub)\n\n# write to .xlsx workbook\nFranceHandbookTable4 <- list(\"Reforms\"=ReformConfigVtoEventsSub[,-c(11:17)],\n                             \"Reforms_detailed\"=ReformConfigVtoEventsSub,\n                             \"Veto_Institutions\"=subset(veto_points_table[,-1],ctr_ccode==\"FRA\"),\n                             \"Cabinet_Parties\" = listOfPartiesInTable)\nstr(FranceHandbookTable4)\n\nstyle_table <- createStyle(fontName = \"Helvetica\", fontSize = \"12\",\n                           numFmt = \"GENERAL\",\n                           halign = \"left\", valign = \"top\")\n\nwrite.xlsx(FranceHandbookTable4\n           , creator = \"Hauke Licht\"\n           , file = \"./data/out/France_handbook_table4.xlsx\"\n           , borders = \"rows\", colNames = T, rowNames = F\n           , style = style_table, overwrite = T)\n\n\nsystem(\"open data/out/France_handbook_table4.xlsx\")\n\n",
    "created" : 1472023252301.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3160855719",
    "id" : "7888671A",
    "lastKnownWriteTime" : 1472140151,
    "path" : "~/Documents/Humboldt/HEALTHDOX/Country_Chapters/jobs/cr_country_table_from_csv.R",
    "project_path" : "jobs/cr_country_table_from_csv.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}