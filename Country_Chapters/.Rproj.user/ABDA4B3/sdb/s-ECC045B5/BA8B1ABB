{
    "contents" : "\nrequire(needs)\nneeds(R.cache,dplyr,openxlsx)\n\n# (1) get data from PCDB\nsetCacheRootPath(path=\"~/Documents/Humboldt/Electoral_Vulnerability/Projects/vaps-dashboard_public\") \n\n# load cached data list\nallPCDBObjects <- loadCache(key=list(\"PCDB\",\"data\"))   # key is PCDB + data\n\n# retrieve data from list\nfor ( o in seq_along(allPCDBObjects) ) { \n  assign(names(allPCDBObjects)[ o ], allPCDBObjects[[ o ]])\n}; rm(o)\n\n# (1a) combine configuration events with veto configuration views\nveto_institutions <- c(\"hog\", \"lh\", \"uh\", \"prs\", \"jud\", \"terr\", \"elct\")\nDFs <- c(\"mv_configuration_events\",paste(\"view_configuration_vto_\",veto_institutions,sep=\"\"))\n  # list of data frames\n  config_vetos <- lapply(DFs,function(x) get(x))\n  # merge all veto views on configuration events by coountry ID and configuration start date\n  config_vetos <- Reduce(function(...) merge( ... , by=c(\"ctr_id\", \"sdate\"),all.x=T), config_vetos)\n\n# (1b) subset  \nconfig_vetos <- config_vetos[, c(\"ctr_id\", \"sdate\", \"cab_id.x\", \"lh_id.x\", \"lhelc_id\", \"uh_id.x\", \"prselc_id\", \n                                 \"hog_not_member_of_cab_parties\", \"vto_hog\", \n                                 \"vto_lh\", \"cab_lh_sts_shr\", \n                                 \"cab_uh_sts_shr\", \"vto_uh\", \n                                 \"cohabitation\",  \"vto_prs\", \n                                 \"vto_jud\", \"vto_terr\", \"vto_elct\") ]\ncolnames(config_vetos)[c(3,4,6)] <- c(\"cab_id\", \"lh_id\", \"uh_id\")\nhead(config_vetos)\n\n# (1c) get veto institution table\nveto_points_table <- merge(country[,c(\"ctr_id\", \"ctr_ccode\")],veto_points[ ,-1],by=\"ctr_id\",all.y=T)\n\n# (2) cabinet table with HOG name and party namees\ncabinet_table <- merge(country[,c(\"ctr_id\", \"ctr_ccode\")],\n                                 cabinet[,c(\"cab_id\", \"ctr_id\", \"cab_sdate\", \"cab_hog_n\")],\n                                 by=\"ctr_id\",all.y=T)\ncabinet_portfolio_table <- merge(cabinet_table,\n                                 subset(cabinet_portfolios, pty_cab==TRUE,c(\"cab_id\", \"pty_id\", \"pty_cab\", \"pty_cab_hog\")),\n                                 by=\"cab_id\",all.y=T)\ncabinet_parties_table <- merge(cabinet_portfolio_table,\n                                 party[, c(\"pty_id\", \"pty_abr\", \"pty_n\", \"pty_n_en\")],\n                                 by=\"pty_id\", all.x=T)\n\nhead( cabinet_parties_table)\ncabinet_parties_table <- cabinet_parties_table %>%  arrange(cab_id, pty_id)\ncabinet_parties_table$cab_hog_n <- trimws(gsub(\"\\t\",\"\", cabinet_parties_table$cab_hog_n))\n\nhead(cabinet_parties_table)\n\ncabinet_parties_table <- cabinet_parties_table %>% \n  arrange(cab_id, pty_id) %>% \n  group_by(cab_id) %>% \n  mutate(in_cab = paste(pty_abr, collapse=\", \") ) %>%  # list all cabinet parties\n  as.data.frame()\n\n  # keep code list with party abbreviations and names\n  cab_parties <- unique(cabinet_parties_table[, c(\"ctr_ccode\", \"pty_abr\", \"pty_n\", \"pty_n_en\")])\n\n# subset: keep only rows of HOG's party  \ncabinet_hog_table <- subset(cabinet_parties_table, pty_cab_hog==TRUE, -c(pty_id,pty_cab,pty_cab_hog))\n  # NOTE: rows are now again uniquely identified by cab_id (i.e. ctr_id and cab_sdate)\n  nrow(cabinet_hog_table) == nrow(unique(cabinet_hog_table))\n\nhead(cabinet_hog_table)\n\n# (3) join cabinet HOG data table on configuration-veto events table \n\nconfigs <- merge(config_vetos,cabinet_hog_table,by=c(\"ctr_id\",\"cab_id\"),all.x=T)\nhead(configs)\nunique(veto_points_table$vto_inst_typ)\n# get names of veto variables \nveto_variables <- colnames(configs)[grepl(\"vto_\",colnames(configs))]\nveto_variables_labels <- c(vto_lh=\"lower house\"\n                           , vto_uh=\"upper house\"\n                           , vto_prs=\"head of state\"\n                           , vto_jud=\"judicial\"\n                           , vto_elct=\"electoral\"\n                           , vto_terr=\"territorial\")\n\nconfigs$open_veto_points <- \"\"  # create empty string vector \n  head(configs)\n  \n  for (config in 1:nrow(configs) ) {\n    for (c in rev(seq_along(veto_variables))) {\n      if ( configs[config, veto_variables[c]] == 1 && !is.na(configs[config, veto_variables[c]]) ) {\n        configs[config, \"open_veto_points\"] <- paste(veto_variables_labels[veto_variables[c]],configs[config, \"open_veto_points\"],sep=\", \")\n      } \n      \n    }\n  }\n  \n  for ( c in seq_along(unique(configs$ctr_id)) ) {\n\n    country_veto_inst <- unique(subset(veto_points_table,ctr_id==c,c(vto_inst_typ,vto_inst_n)))\n    country_veto_inst <- within(country_veto_inst, paste_names <- paste(vto_inst_typ, \" (\", vto_inst_n, \")\", sep=\"\"))\n    \n    veto_variables_labels_ctr <- veto_variables_labels[veto_variables_labels %in% country_veto_inst$vto_inst_typ]\n    \n    for ( inst in seq_along(veto_variables_labels_ctr) ) { \n      configs[configs$ctr_id==c,\"open_veto_points\"] <- gsub(veto_variables_labels_ctr[inst]\n                                                            , country_veto_inst[country_veto_inst$vto_inst_typ == veto_variables_labels_ctr[inst], \"paste_names\"]\n                                                            , configs[configs$ctr_id==c,\"open_veto_points\"])\n    }\n  }\n  \n  # clean open veto points variable \n  configs$open_veto_points <- gsub(\"(, )*$\",\"\", configs$open_veto_points)  \n  head(configs)\n  \n# prepare for matching on reform events:\n  # date must have 'Date' class\n  configs$sdate <- as.Date(configs$sdate, format=\"%Y-%m-%d\")\n  \n  # ctr_id can be dropped, is only internal identifier (use ISO character code instead)\n  configs <- configs[, c(\"ctr_ccode\",\"sdate\",\n                             \"cab_hog_n\",\"pty_abr\",\"cab_sdate\",\"in_cab\",\n                             \"cab_lh_sts_shr\",\"vto_lh\",\n                             \"cab_uh_sts_shr\",\"vto_uh\",\n                             \"vto_prs\",\"vto_jud\",\"vto_terr\",\"vto_elct\",\n                             \"open_veto_points\")]\n  head(configs)\n \n\n\n\n\n",
    "created" : 1472032384575.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3882112534",
    "id" : "BA8B1ABB",
    "lastKnownWriteTime" : 1472140150,
    "path" : "~/Documents/Humboldt/HEALTHDOX/Country_Chapters/jobs/cr_config_with_hog_and_veto_info.R",
    "project_path" : "jobs/cr_config_with_hog_and_veto_info.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}